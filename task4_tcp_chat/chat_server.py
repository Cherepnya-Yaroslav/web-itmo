#!/usr/bin/env python3
"""
TCP Chat Server –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 4
–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º threading
"""

import socket
import sys
import threading
import time
from datetime import datetime

class ChatServer:
    def __init__(self, host='localhost', port=12347):
        self.host = host
        self.port = port
        self.clients = {}  # {client_socket: {'nickname': str, 'address': tuple}}
        self.server_socket = None
        self.running = False
        self.lock = threading.Lock()
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.server_socket.bind((self.host, self.port))
            self.server_socket.listen(10)
            
            self.running = True
            print(f"üöÄ Chat Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            print("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            print("-" * 50)
            
            while self.running:
                try:
                    client_socket, client_address = self.server_socket.accept()
                    print(f"üì± –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {client_address}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
                    client_thread = threading.Thread(
                        target=self.handle_client,
                        args=(client_socket, client_address),
                        daemon=True
                    )
                    client_thread.start()
                    
                except socket.error:
                    if self.running:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        self.running = False
        if self.server_socket:
            self.server_socket.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        with self.lock:
            for client_socket in list(self.clients.keys()):
                try:
                    client_socket.close()
                except:
                    pass
            self.clients.clear()
        
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def handle_client(self, client_socket, client_address):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        nickname = None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            nickname = self.get_nickname(client_socket, client_address)
            if not nickname:
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
            with self.lock:
                self.clients[client_socket] = {
                    'nickname': nickname,
                    'address': client_address
                }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            self.broadcast(f"üëã {nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!", exclude=client_socket)
            self.send_to_client(client_socket, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {nickname}!")
            self.send_to_client(client_socket, f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {len(self.clients)}")
            
            print(f"üë§ {nickname} ({client_address}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.clients)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            while self.running:
                try:
                    message = client_socket.recv(1024).decode('utf-8')
                    if not message:
                        break
                    
                    message = message.strip()
                    if not message:
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                    if message.startswith('/'):
                        self.handle_command(client_socket, nickname, message)
                    else:
                        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        formatted_message = f"[{timestamp}] {nickname}: {message}"
                        self.broadcast(formatted_message, exclude=client_socket)
                        print(f"üí¨ {nickname}: {message}")
                
                except socket.error:
                    break
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {nickname}: {e}")
                    break
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_address}: {e}")
        
        finally:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            if nickname:
                with self.lock:
                    if client_socket in self.clients:
                        del self.clients[client_socket]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                self.broadcast(f"üëã {nickname} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!")
                print(f"üë§ {nickname} ({client_address}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.clients)}")
            
            try:
                client_socket.close()
            except:
                pass
    
    def get_nickname(self, client_socket, client_address):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∏–∫–Ω–µ–π–º
            self.send_to_client(client_socket, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            nickname = client_socket.recv(1024).decode('utf-8').strip()
            
            if not nickname:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
            with self.lock:
                existing_nicknames = [client['nickname'] for client in self.clients.values()]
                if nickname in existing_nicknames:
                    self.send_to_client(client_socket, f"‚ùå –ù–∏–∫–Ω–µ–π–º '{nickname}' —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
                    return self.get_nickname(client_socket, client_address)
            
            return nickname
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç {client_address}: {e}")
            return None
    
    def handle_command(self, client_socket, nickname, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞"""
        command = command.lower().strip()
        
        if command == '/help':
            help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
/time - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/quit - –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç
            """
            self.send_to_client(client_socket, help_text)
        
        elif command == '/users':
            with self.lock:
                users = [client['nickname'] for client in self.clients.values()]
            users_text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω ({len(users)}): {', '.join(users)}"
            self.send_to_client(client_socket, users_text)
        
        elif command == '/time':
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.send_to_client(client_socket, f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
        
        elif command == '/quit':
            self.send_to_client(client_socket, "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            client_socket.close()
        
        else:
            self.send_to_client(client_socket, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    def send_to_client(self, client_socket, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            client_socket.send(f"{message}\n".encode('utf-8'))
        except:
            pass
    
    def broadcast(self, message, exclude=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ"""
        with self.lock:
            for client_socket in list(self.clients.keys()):
                if client_socket != exclude:
                    self.send_to_client(client_socket, message)

def main():
    server = ChatServer()
    
    try:
        server.start()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        server.stop()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        server.stop()
        sys.exit(1)

if __name__ == "__main__":
    main()
