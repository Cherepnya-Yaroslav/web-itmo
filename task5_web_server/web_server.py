#!/usr/bin/env python3
"""
Web Server –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 5
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∏ POST HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ –æ—Ü–µ–Ω–∫–µ
–û—Ç–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –æ—Ü–µ–Ω–∫–∞—Ö –≤ –≤–∏–¥–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
"""

import socket
import sys
import os
import urllib.parse
from datetime import datetime

class GradeManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∞–º–∏"""
    
    def __init__(self):
        self.grades_file = "grades.txt"
        self.grades = []
        self.load_grades()
    
    def load_grades(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.grades_file):
                with open(self.grades_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line:
                            parts = line.split('|')
                            if len(parts) == 3:
                                self.grades.append({
                                    'discipline': parts[0],
                                    'grade': parts[1],
                                    'timestamp': parts[2]
                                })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫: {e}")
    
    def save_grades(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.grades_file, 'w', encoding='utf-8') as f:
                for grade in self.grades:
                    f.write(f"{grade['discipline']}|{grade['grade']}|{grade['timestamp']}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: {e}")
    
    def add_grade(self, discipline, grade):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.grades.append({
            'discipline': discipline,
            'grade': grade,
            'timestamp': timestamp
        })
        self.save_grades()
        return True
    
    def get_all_grades(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ü–µ–Ω–∫–∏"""
        return self.grades

class WebServer:
    """–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, host='localhost', port=8081):
        self.host = host
        self.port = port
        self.grade_manager = GradeManager()
        self.server_socket = None
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.server_socket.bind((self.host, self.port))
            self.server_socket.listen(5)
            
            print(f"üåê Web Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.host}:{self.port}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            print("  GET  / - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏")
            print("  POST /add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            print("-" * 50)
            
            while True:
                try:
                    client_socket, client_address = self.server_socket.accept()
                    print(f"üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {client_address}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                    self.handle_request(client_socket, client_address)
                    
                except socket.error:
                    break
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        if self.server_socket:
            self.server_socket.close()
        print("üõë –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def handle_request(self, client_socket, client_address):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
            request = client_socket.recv(4096).decode('utf-8')
            if not request:
                return
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
            lines = request.split('\n')
            if not lines:
                return
            
            request_line = lines[0].strip()
            parts = request_line.split()
            
            if len(parts) < 3:
                self.send_error_response(client_socket, 400, "Bad Request")
                return
            
            method, path, version = parts[0], parts[1], parts[2]
            
            print(f"üìù {method} {path} –æ—Ç {client_address}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
            if method == 'GET':
                self.handle_get(client_socket, path)
            elif method == 'POST':
                self.handle_post(client_socket, path, request)
            else:
                self.send_error_response(client_socket, 405, "Method Not Allowed")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.send_error_response(client_socket, 500, "Internal Server Error")
        finally:
            client_socket.close()
    
    def handle_get(self, client_socket, path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å—ã"""
        if path == '/' or path == '/index.html':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
            html_content = self.generate_grades_html()
            self.send_html_response(client_socket, html_content)
        else:
            self.send_error_response(client_socket, 404, "Not Found")
    
    def handle_post(self, client_socket, path, request):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã"""
        if path == '/add':
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
                body = self.extract_post_body(request)
                discipline, grade = self.parse_form_data(body)
                
                if discipline and grade:
                    self.grade_manager.add_grade(discipline, grade)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞: {discipline} - {grade}")
                    
                    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    self.send_redirect_response(client_socket, "/")
                else:
                    self.send_error_response(client_socket, 400, "Bad Request - Missing data")
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
                self.send_error_response(client_socket, 500, "Internal Server Error")
        else:
            self.send_error_response(client_socket, 404, "Not Found")
    
    def extract_post_body(self, request):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–æ POST-–∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ
            parts = request.split('\r\n\r\n')
            if len(parts) > 1:
                return parts[1]
            return ""
        except:
            return ""
    
    def parse_form_data(self, body):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
        try:
            data = urllib.parse.parse_qs(body)
            discipline = data.get('discipline', [''])[0]
            grade = data.get('grade', [''])[0]
            return discipline, grade
        except:
            return None, None
    
    def generate_grades_html(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏"""
        grades = self.grade_manager.get_all_grades()
        
        html = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ - –ó–∞–¥–∞–Ω–∏–µ 5</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
        }}
        
        h1 {{
            color: #333;
            text-align: center;
            margin-bottom: 30px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }}
        
        .form-section {{
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            border-left: 4px solid #667eea;
        }}
        
        .form-group {{
            margin-bottom: 20px;
        }}
        
        label {{
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #333;
        }}
        
        input[type="text"], input[type="number"] {{
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            box-sizing: border-box;
        }}
        
        input[type="text"]:focus, input[type="number"]:focus {{
            outline: none;
            border-color: #667eea;
        }}
        
        button {{
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: transform 0.2s;
        }}
        
        button:hover {{
            transform: translateY(-2px);
        }}
        
        .grades-section {{
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            border-left: 4px solid #28a745;
        }}
        
        .grades-table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }}
        
        .grades-table th, .grades-table td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        
        .grades-table th {{
            background: #667eea;
            color: white;
            font-weight: bold;
        }}
        
        .grades-table tr:nth-child(even) {{
            background: #f2f2f2;
        }}
        
        .grades-table tr:hover {{
            background: #e9ecef;
        }}
        
        .no-grades {{
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 20px;
        }}
        
        .stats {{
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
            padding: 20px;
            background: #e9ecef;
            border-radius: 10px;
        }}
        
        .stat-item {{
            text-align: center;
        }}
        
        .stat-number {{
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }}
        
        .stat-label {{
            color: #666;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üìö –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫</h1>
        
        <div class="form-section">
            <h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É</h2>
            <form action="/add" method="POST">
                <div class="form-group">
                    <label for="discipline">–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</label>
                    <input type="text" id="discipline" name="discipline" required 
                           placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –§–∏–∑–∏–∫–∞, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ">
                </div>
                <div class="form-group">
                    <label for="grade">–û—Ü–µ–Ω–∫–∞:</label>
                    <input type="number" id="grade" name="grade" min="1" max="5" required 
                           placeholder="–û—Ç 1 –¥–æ 5">
                </div>
                <button type="submit">–î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É</button>
            </form>
        </div>
        
        <div class="grades-section">
            <h2>üìä –í—Å–µ –æ—Ü–µ–Ω–∫–∏</h2>
"""
        
        if grades:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_grades = len(grades)
            avg_grade = sum(int(g['grade']) for g in grades) / total_grades
            disciplines = len(set(g['discipline'] for g in grades))
            
            html += f"""
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number">{total_grades}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{avg_grade:.1f}</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{disciplines}</div>
                    <div class="stat-label">–î–∏—Å—Ü–∏–ø–ª–∏–Ω</div>
                </div>
            </div>
            
            <table class="grades-table">
                <thead>
                    <tr>
                        <th>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</th>
                        <th>–û—Ü–µ–Ω–∫–∞</th>
                        <th>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</th>
                    </tr>
                </thead>
                <tbody>
"""
            
            for grade in reversed(grades):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–≤—ã–º–∏
                html += f"""
                    <tr>
                        <td>{grade['discipline']}</td>
                        <td>{grade['grade']}</td>
                        <td>{grade['timestamp']}</td>
                    </tr>
"""
            
            html += """
                </tbody>
            </table>
"""
        else:
            html += """
            <div class="no-grades">
                üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –æ—Ü–µ–Ω–∫—É –≤—ã—à–µ!
            </div>
"""
        
        html += """
        </div>
    </div>
</body>
</html>
"""
        
        return html
    
    def send_html_response(self, client_socket, html_content):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-–æ—Ç–≤–µ—Ç"""
        response = f"""HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: {len(html_content.encode('utf-8'))}
Server: Python-Web-Server/1.0
Date: {datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT')}
Connection: close

{html_content}"""
        
        client_socket.send(response.encode('utf-8'))
    
    def send_redirect_response(self, client_socket, location):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç"""
        response = f"""HTTP/1.1 302 Found
Location: {location}
Server: Python-Web-Server/1.0
Date: {datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT')}
Connection: close

"""
        
        client_socket.send(response.encode('utf-8'))
    
    def send_error_response(self, client_socket, status_code, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
        status_messages = {
            400: "Bad Request",
            404: "Not Found",
            405: "Method Not Allowed",
            500: "Internal Server Error"
        }
        
        error_html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>{status_code} - {status_messages.get(status_code, 'Error')}</title>
    <style>
        body {{ font-family: Arial, sans-serif; text-align: center; margin-top: 100px; }}
        h1 {{ color: #e74c3c; }}
    </style>
</head>
<body>
    <h1>{status_code} - {message}</h1>
    <p><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
</body>
</html>"""
        
        response = f"""HTTP/1.1 {status_code} {status_messages.get(status_code, 'Error')}
Content-Type: text/html; charset=utf-8
Content-Length: {len(error_html.encode('utf-8'))}
Server: Python-Web-Server/1.0
Date: {datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT')}
Connection: close

{error_html}"""
        
        client_socket.send(response.encode('utf-8'))

def main():
    server = WebServer()
    
    try:
        server.start()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        server.stop()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        server.stop()
        sys.exit(1)

if __name__ == "__main__":
    main()
